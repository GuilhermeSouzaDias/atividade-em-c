//exercicio 1
void inserir_inicio(No** inicio, int valor) {
    No* novo = criar_no(valor);
    novo->proximo = *inicio;
    *inicio = novo;
}

void inserir_fim(No** inicio, int valor) {
    No* novo = criar_no(valor);
    if (*inicio == NULL) {
        *inicio = novo;
        return;
    }
    No* atual = *inicio;
    while (atual->proximo != NULL) {
        atual = atual->proximo;
    }
    atual->proximo = novo;
}

            //main exercicio 1
            int main() {
                    No* lista = NULL;
                
                    inserir_inicio(&lista, 10);
                    inserir_inicio(&lista, 20);
                    inserir_fim(&lista, 30);
                    inserir_fim(&lista, 40);
                
                    printf("Lista atual:\n");
                    imprimir_lista(lista);  
                
                    liberar_lista(lista);
                    return 0;
                }

//exercicio 2

int contar_nos(No* inicio) {
    int contador = 0;
    No* atual = inicio;
    while (atual != NULL) {
        contador++;
        atual = atual->proximo;
    }
    return contador;
}


//exercicio 3
int buscar_elemento(No* inicio, int valor_buscado) {
    No* atual = inicio;
    while (atual != NULL) {
        if (atual->valor == valor_buscado) {
            return 1; // Valor encontrado
        }
        atual = atual->proximo;
    }
    return 0; // Valor não encontrado
}

        //main exercicio3
            int main() {
               
                No* n1 = criar_no(10);
                No* n2 = criar_no(20);
                No* n3 = criar_no(30);
                n1->proximo = n2;
                n2->proximo = n3;
            
             
                printf("Buscar 20: %d\n", buscar_elemento(n1, 20)); // Saída: 1
                printf("Buscar 40: %d\n", buscar_elemento(n1, 40)); // Saída: 0
            
                free(n1);
                free(n2);
                free(n3);
            
                return 0;
            }
            
//exercicio 4 

void inserir_posicao(No** inicio, int valor, int posicao) {
    if (posicao < 0) {
        printf("Posição inválida.\n");
        return;
    }

    No* novo = criar_no(valor);

    
    if (posicao == 0) {
        novo->proximo = *inicio;
        *inicio = novo;
        return;
    }

   
    No* atual = *inicio;
    int i = 0;
    while (atual != NULL && i < posicao - 1) {
        atual = atual->proximo;
        i++;
    }

    if (atual == NULL) {
        printf("Posição fora dos limites da lista.\n");
        free(novo);
        return;
    }

    novo->proximo = atual->proximo;
    atual->proximo = novo;
}


        //main exercicio 4
            int main() {
            No* lista = NULL;
        
            // Lista inicial: vazia
            inserir_posicao(&lista, 10, 0); // Lista: 10
            inserir_posicao(&lista, 20, 1); // Lista: 10 -> 20
            inserir_posicao(&lista, 30, 1); // Lista: 10 -> 30 -> 20
            inserir_posicao(&lista, 5, 0);  // Lista: 5 -> 10 -> 30 -> 20
        
            imprimir_lista(lista); // Saída esperada: 5 -> 10 -> 30 -> 20 -> NULL
        
            liberar_lista(lista);
            return 0;

//exercicio 1
void inserir_inicio(No** inicio, int valor) {
    No* novo = criar_no(valor);
    novo->proximo = *inicio;
    *inicio = novo;
}

void inserir_fim(No** inicio, int valor) {
    No* novo = criar_no(valor);
    if (*inicio == NULL) {
        *inicio = novo;
        return;
    }
    No* atual = *inicio;
    while (atual->proximo != NULL) {
        atual = atual->proximo;
    }
    atual->proximo = novo;
}

            //main exercicio 1
            int main() {
                    No* lista = NULL;
                
                    inserir_inicio(&lista, 10);
                    inserir_inicio(&lista, 20);
                    inserir_fim(&lista, 30);
                    inserir_fim(&lista, 40);
                
                    printf("Lista atual:\n");
                    imprimir_lista(lista);  
                
                    liberar_lista(lista);
                    return 0;
                }

//exercicio 2

int contar_nos(No* inicio) {
    int contador = 0;
    No* atual = inicio;
    while (atual != NULL) {
        contador++;
        atual = atual->proximo;
    }
    return contador;
}

        //main exercicio 2
            int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 1);
            inserir_fim(&lista, 2);
            inserir_fim(&lista, 3);
            inserir_fim(&lista, 4);
        
            printf("Número de nós na lista: %d\n", contar_nos(lista));
        
            liberar_lista(lista);
            return 0;
            }



//exercicio 3
int buscar_elemento(No* inicio, int valor_buscado) {
    No* atual = inicio;
    while (atual != NULL) {
        if (atual->valor == valor_buscado) {
            return 1; 
        }
        atual = atual->proximo;
    }
    return 0; 
}
        //main exercicio3
            int main() {
                No* n1 = criar_no(10);
                No* n2 = criar_no(20);
                No* n3 = criar_no(30);
                n1->proximo = n2;
                n2->proximo = n3;
            
                printf("Buscar 20: %d\n", buscar_elemento(n1, 20)); // Saída: 1
                printf("Buscar 40: %d\n", buscar_elemento(n1, 40)); // Saída: 0
            
                free(n1);
                free(n2);
                free(n3);
            
                return 0;
            }



//exercicio 4 
void inserir_posicao(No** inicio, int valor, int posicao) {
    if (posicao < 0) {
        printf("Posição inválida.\n");
        return;
    }

    No* novo = criar_no(valor);

    if (posicao == 0) {
        novo->proximo = *inicio;
        *inicio = novo;
        return;
    }
   
    No* atual = *inicio;
    int i = 0;
    while (atual != NULL && i < posicao - 1) {
        atual = atual->proximo;
        i++;
    }

    if (atual == NULL) {
        printf("Posição fora dos limites da lista.\n");
        free(novo);
        return;
    }

    novo->proximo = atual->proximo;
    atual->proximo = novo;
}
        //main exercicio 4
            int main() {
            No* lista = NULL;
        
            // Lista inicial: vazia
            inserir_posicao(&lista, 10, 0); 
            inserir_posicao(&lista, 20, 1); 
            inserir_posicao(&lista, 30, 1);
            inserir_posicao(&lista, 5, 0);  
        
            imprimir_lista(lista); 
        
            liberar_lista(lista);
            return 0;

            }



//exercicio 5
void remover_valor(No** inicio, int valor) {
    No* atual = *inicio;
    No* anterior = NULL;

    while (atual != NULL) {
        if (atual->valor == valor) {
            if (anterior == NULL) {
                // Remover o primeiro nó
                *inicio = atual->proximo;
            } else {
                // Remover nó do meio ou fim
                anterior->proximo = atual->proximo;
            }
            free(atual);
            printf("Valor %d removido.\n", valor);
            return;
        }
        anterior = atual;
        atual = atual->proximo;
    }

    printf("Valor %d não encontrado.\n", valor);
}
                //main exercicio 5
                    int main() {
                No* lista = NULL;
                inserir_fim(&lista, 10);
                inserir_fim(&lista, 20);
                inserir_fim(&lista, 30);
                inserir_fim(&lista, 40);
                inserir_fim(&lista, 20);
            
                printf("Lista original:\n");
                imprimir_lista(lista); 
            
                remover_valor(&lista, 20); 
            
                printf("Lista após remover 20:\n");
                imprimir_lista(lista);
            
                remover_valor(&lista, 99); // Tenta remover valor que não existe
            
                liberar_lista(lista);
                return 0;
                }



//exercicio 6
void inverter_lista(No** inicio) {
    No* anterior = NULL;
    No* atual = *inicio;
    No* proximo = NULL;

    while (atual != NULL) {
        proximo = atual->proximo;  
        atual->proximo = anterior; 
        anterior = atual;          
        atual = proximo;           
    }

    *inicio = anterior; 
}
        //main exercicio 6 
                int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 1);
            inserir_fim(&lista, 2);
            inserir_fim(&lista, 3);
            inserir_fim(&lista, 4);
            inserir_fim(&lista, 5);
        
            printf("Lista original:\n");
            imprimir_lista(lista);  
        
            inverter_lista(&lista);
        
            printf("Lista invertida:\n");
            imprimir_lista(lista);  
        
            liberar_lista(lista);
            return 0;
        }



//exercicio 7
No* encontrar_meio(No* inicio) {
    if (inicio == NULL) return NULL;

    No* lento = inicio;
    No* rapido = inicio;

    while (rapido != NULL && rapido->proximo != NULL) {
        lento = lento->proximo;
        rapido = rapido->proximo->proximo;
    }

    return lento; 
}
        //main exercicio 7
            int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 10);
            inserir_fim(&lista, 20);
            inserir_fim(&lista, 30);
            inserir_fim(&lista, 40);
            inserir_fim(&lista, 50);
        
            printf("Lista:\n");
            imprimir_lista(lista);
        
            No* meio = encontrar_meio(lista);
            if (meio != NULL)
                printf("Nó do meio: %d\n", meio->valor); 
        
            liberar_lista(lista);
            return 0;
        }



//exercicio 8
void imprimir_reverso(No* inicio) {
    //Contar o número de nós
    int tamanho = 0;
    No* atual = inicio;
    while (atual != NULL) {
        tamanho++;
        atual = atual->proximo;
    }

    //Empilhar os valores
    Pilha* pilha = criar_pilha(tamanho);
    atual = inicio;
    while (atual != NULL) {
        empilhar(pilha, atual->valor);
        atual = atual->proximo;
    }

    //Desempilhar os valores
    printf("Lista em ordem reversa:\n");
    while (!pilha_vazia(pilha)) {
        printf("%d -> ", desempilhar(pilha));
    }
    printf("NULL\n");

    liberar_pilha(pilha);
}
                //main exercicio 8
                            int main() {
                    No* lista = NULL;
                
                    inserir_fim(&lista, 10);
                    inserir_fim(&lista, 20);
                    inserir_fim(&lista, 30);
                    inserir_fim(&lista, 40);
                
                    printf("Impressão reversa:\n");
                    imprimir_reverso(lista);
                
                    liberar_lista(lista);
                    return 0;
                }

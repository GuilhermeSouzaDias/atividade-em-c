//exercicio 1
void inserir_inicio(No** inicio, int valor) {
    No* novo = criar_no(valor);
    novo->proximo = *inicio;
    *inicio = novo;
}

void inserir_fim(No** inicio, int valor) {
    No* novo = criar_no(valor);
    if (*inicio == NULL) {
        *inicio = novo;
        return;
    }
    No* atual = *inicio;
    while (atual->proximo != NULL) {
        atual = atual->proximo;
    }
    atual->proximo = novo;
}

            //main exercicio 1
            int main() {
                    No* lista = NULL;
                
                    inserir_inicio(&lista, 10);
                    inserir_inicio(&lista, 20);
                    inserir_fim(&lista, 30);
                    inserir_fim(&lista, 40);
                
                    printf("Lista atual:\n");
                    imprimir_lista(lista);  
                
                    liberar_lista(lista);
                    return 0;
                }

//exercicio 2

int contar_nos(No* inicio) {
    int contador = 0;
    No* atual = inicio;
    while (atual != NULL) {
        contador++;
        atual = atual->proximo;
    }
    return contador;
}

        //main exercicio 2
            int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 1);
            inserir_fim(&lista, 2);
            inserir_fim(&lista, 3);
            inserir_fim(&lista, 4);
        
            printf("Número de nós na lista: %d\n", contar_nos(lista));
        
            liberar_lista(lista);
            return 0;
            }



//exercicio 3
int buscar_elemento(No* inicio, int valor_buscado) {
    No* atual = inicio;
    while (atual != NULL) {
        if (atual->valor == valor_buscado) {
            return 1; 
        }
        atual = atual->proximo;
    }
    return 0; 
}
        //main exercicio3
            int main() {
                No* n1 = criar_no(10);
                No* n2 = criar_no(20);
                No* n3 = criar_no(30);
                n1->proximo = n2;
                n2->proximo = n3;
            
                printf("Buscar 20: %d\n", buscar_elemento(n1, 20)); // Saída: 1
                printf("Buscar 40: %d\n", buscar_elemento(n1, 40)); // Saída: 0
            
                free(n1);
                free(n2);
                free(n3);
            
                return 0;
            }



//exercicio 4 
void inserir_posicao(No** inicio, int valor, int posicao) {
    if (posicao < 0) {
        printf("Posição inválida.\n");
        return;
    }

    No* novo = criar_no(valor);

    if (posicao == 0) {
        novo->proximo = *inicio;
        *inicio = novo;
        return;
    }
   
    No* atual = *inicio;
    int i = 0;
    while (atual != NULL && i < posicao - 1) {
        atual = atual->proximo;
        i++;
    }

    if (atual == NULL) {
        printf("Posição fora dos limites da lista.\n");
        free(novo);
        return;
    }

    novo->proximo = atual->proximo;
    atual->proximo = novo;
}
        //main exercicio 4
            int main() {
            No* lista = NULL;
        
            // Lista inicial: vazia
            inserir_posicao(&lista, 10, 0); 
            inserir_posicao(&lista, 20, 1); 
            inserir_posicao(&lista, 30, 1);
            inserir_posicao(&lista, 5, 0);  
        
            imprimir_lista(lista); 
        
            liberar_lista(lista);
            return 0;

            }



//exercicio 5
void remover_valor(No** inicio, int valor) {
    No* atual = *inicio;
    No* anterior = NULL;

    while (atual != NULL) {
        if (atual->valor == valor) {
            if (anterior == NULL) {
                // Remover o primeiro nó
                *inicio = atual->proximo;
            } else {
                // Remover nó do meio ou fim
                anterior->proximo = atual->proximo;
            }
            free(atual);
            printf("Valor %d removido.\n", valor);
            return;
        }
        anterior = atual;
        atual = atual->proximo;
    }

    printf("Valor %d não encontrado.\n", valor);
}
                //main exercicio 5
                    int main() {
                No* lista = NULL;
                inserir_fim(&lista, 10);
                inserir_fim(&lista, 20);
                inserir_fim(&lista, 30);
                inserir_fim(&lista, 40);
                inserir_fim(&lista, 20);
            
                printf("Lista original:\n");
                imprimir_lista(lista); 
            
                remover_valor(&lista, 20); 
            
                printf("Lista após remover 20:\n");
                imprimir_lista(lista);
            
                remover_valor(&lista, 99); // Tenta remover valor que não existe
            
                liberar_lista(lista);
                return 0;
                }



//exercicio 6
void inverter_lista(No** inicio) {
    No* anterior = NULL;
    No* atual = *inicio;
    No* proximo = NULL;

    while (atual != NULL) {
        proximo = atual->proximo;  
        atual->proximo = anterior; 
        anterior = atual;          
        atual = proximo;           
    }

    *inicio = anterior; 
}
        //main exercicio 6 
                int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 1);
            inserir_fim(&lista, 2);
            inserir_fim(&lista, 3);
            inserir_fim(&lista, 4);
            inserir_fim(&lista, 5);
        
            printf("Lista original:\n");
            imprimir_lista(lista);  
        
            inverter_lista(&lista);
        
            printf("Lista invertida:\n");
            imprimir_lista(lista);  
        
            liberar_lista(lista);
            return 0;
        }



//exercicio 7
No* encontrar_meio(No* inicio) {
    if (inicio == NULL) return NULL;

    No* lento = inicio;
    No* rapido = inicio;

    while (rapido != NULL && rapido->proximo != NULL) {
        lento = lento->proximo;
        rapido = rapido->proximo->proximo;
    }

    return lento; 
}
        //main exercicio 7
            int main() {
            No* lista = NULL;
        
            inserir_fim(&lista, 10);
            inserir_fim(&lista, 20);
            inserir_fim(&lista, 30);
            inserir_fim(&lista, 40);
            inserir_fim(&lista, 50);
        
            printf("Lista:\n");
            imprimir_lista(lista);
        
            No* meio = encontrar_meio(lista);
            if (meio != NULL)
                printf("Nó do meio: %d\n", meio->valor); 
        
            liberar_lista(lista);
            return 0;
        }



//exercicio 8
void imprimir_reverso(No* inicio) {
    //Contar o número de nós
    int tamanho = 0;
    No* atual = inicio;
    while (atual != NULL) {
        tamanho++;
        atual = atual->proximo;
    }

    //Empilhar os valores
    Pilha* pilha = criar_pilha(tamanho);
    atual = inicio;
    while (atual != NULL) {
        empilhar(pilha, atual->valor);
        atual = atual->proximo;
    }

    //Desempilhar os valores
    printf("Lista em ordem reversa:\n");
    while (!pilha_vazia(pilha)) {
        printf("%d -> ", desempilhar(pilha));
    }
    printf("NULL\n");

    liberar_pilha(pilha);
}
                //main exercicio 8
                            int main() {
                    No* lista = NULL;
                
                    inserir_fim(&lista, 10);
                    inserir_fim(&lista, 20);
                    inserir_fim(&lista, 30);
                    inserir_fim(&lista, 40);
                
                    printf("Impressão reversa:\n");
                    imprimir_reverso(lista);
                
                    liberar_lista(lista);
                    return 0;
                }


//exercicio 9

int pilha[TAMANHO_MAX];
int topo_pilha = -1;

int esta_vazia() {
    return topo_pilha == -1;
}

void push(int valor) {
    if (topo_pilha == TAMANHO_MAX - 1) {
        printf("Erro: Pilha cheia!\n");
        return;
    }
    topo_pilha++;
    pilha[topo_pilha] = valor;
}

void pop() {
    if (esta_vazia()) {
        printf("Erro: Pilha vazia!\n");
        return;
    }
    topo_pilha--;
}

int topo() {
    if (esta_vazia()) {
        printf("Erro: Pilha vazia!\n");
        exit(1); 
    }
    return pilha[topo_pilha];
}
        //main exercicio 9
            int main() {
            push(10);
            push(20);
            push(30);
        
            printf("Topo da pilha: %d\n", topo()); // Esperado: 30
        
            pop();
            printf("Topo após pop: %d\n", topo()); // Esperado: 20
        
            while (!esta_vazia()) {
                printf("Removendo: %d\n", topo());
                pop();
            }
        
            pop(); // Tentativa de remover de pilha vazia
        
            return 0;
            }
        



//exercicio 10
typedef struct No {
    int valor;
    struct No* proximo;
} No;


typedef struct {
    No* topo;
} Pilha;


Pilha* criar_pilha() {
    Pilha* pilha = (Pilha*)malloc(sizeof(Pilha));
    pilha->topo = NULL;
    return pilha;
}

int esta_vazia(Pilha* pilha) {
    return pilha->topo == NULL;
}

void push(Pilha* pilha, int valor) {
    No* novo = (No*)malloc(sizeof(No));
    if (!novo) {
        printf("Erro de alocação de memória.\n");
        exit(1);
    }
    novo->valor = valor;
    novo->proximo = pilha->topo;
    pilha->topo = novo;
}

void pop(Pilha* pilha) {
    if (esta_vazia(pilha)) {
        printf("Erro: pilha vazia!\n");
        return;
    }
    No* temp = pilha->topo;
    pilha->topo = pilha->topo->proximo;
    free(temp);
}

int topo(Pilha* pilha) {
    if (esta_vazia(pilha)) {
        printf("Erro: pilha vazia!\n");
        exit(1); 
    }
    return pilha->topo->valor;
}

void liberar_pilha(Pilha* pilha) {
    while (!esta_vazia(pilha)) {
        pop(pilha);
    }
    free(pilha);
}
        //main exercicio 10
            int main() {
            Pilha* pilha = criar_pilha();
        
            push(pilha, 10);
            push(pilha, 20);
            push(pilha, 30);
        
            printf("Topo: %d\n", topo(pilha)); // Esperado: 30
        
            pop(pilha);
            printf("Topo após pop: %d\n", topo(pilha)); // Esperado: 20
        
            while (!esta_vazia(pilha)) {
                printf("Removendo: %d\n", topo(pilha));
                pop(pilha);
            }
        
            pop(pilha); // Tentativa de remover de pilha vazia
        
            liberar_pilha(pilha);
            return 0;
            }



//exercicio 11
int verificar_balanceamento(const char* str) {
    char pilha[MAX];
    int topo = -1;

    for (int i = 0; str[i] != '\0'; i++) {
        char c = str[i];

        if (c == '(' || c == '[' || c == '{') {
            if (topo == MAX - 1) {
                printf("Erro: pilha cheia.\n");
                return 0;
            }
            pilha[++topo] = c;
        }
      
        else if (c == ')' || c == ']' || c == '}') {
            if (topo == -1 || !corresponde(pilha[topo], c)) {
                return 0; // Desbalanceado
            }
            topo--; // Remove o topo
        }
    }

    return topo == -1;
}
            //main exercicio 11
                int main() {
                const char* teste1 = "({[]})";
                const char* teste2 = "({[})";
                const char* teste3 = "(()[]{}{[]})";
            
                printf("Teste 1: %s -> %s\n", teste1, verificar_balanceamento(teste1) ? "Válido" : "Inválido");
                printf("Teste 2: %s -> %s\n", teste2, verificar_balanceamento(teste2) ? "Válido" : "Inválido");
                printf("Teste 3: %s -> %s\n", teste3, verificar_balanceamento(teste3) ? "Válido" : "Inválido");
            
                return 0;
                }



//exercicio 12
void inverter_string(char* str) {
    char pilha[MAX];
    int topo = -1;
    int i;

    for (i = 0; str[i] != '\0'; i++) {
        pilha[++topo] = str[i];
    }

    for (i = 0; topo >= 0; i++) {
        str[i] = pilha[topo--];
    }
    str[i] = '\0';
}
                    //main exercicio 12
                        int main() {
                        char palavra[MAX];
                    
                        printf("Digite uma string: ");
                        scanf("%s", palavra);
                    
                        inverter_string(palavra);
                    
                        printf("String invertida: %s\n", palavra);
                    
                        return 0;
                        }



//exercicio 13
int ehPalindromo(const char *str) {
    Pilha pilha;
    inicializaPilha(&pilha);

    int len = strlen(str);

                //main exercicio 13
                    int main() {
                        char str[MAX];
                        printf("Digite uma string: ");
                        fgets(str, MAX, stdin);
                        str[strcspn(str, "\n")] = 0;  // Remove o caractere de nova linha da entrada
                    
                        if (ehPalindromo(str)) {
                            printf("A string é um palíndromo.\n");
                        } else {
                            printf("A string não é um palíndromo.\n");
                        }
                    
                        return 0;
                    }


//exercicio 14
void empilhar(Pilha *p, int item) {
    if (!pilhaCheia(p)) {
        p->items[++(p->top)] = item;
    }
}

int desempilhar(Pilha *p) {
    if (!pilhaVazia(p)) {
        return p->items[(p->top)--];
    }
    return -1;  // Caso a pilha esteja vazia
}

int topo(Pilha *p) {
    if (!pilhaVazia(p)) {
        return p->items[p->top];
    }
    return -1;  // Caso a pilha esteja vazia
}

void ordenarPilha(Pilha *pOriginal) {
    Pilha pAuxiliar;
    inicializaPilha(&pAuxiliar);

    while (!pilhaVazia(pOriginal)) {
        // Desempilha o elemento da pilha original
        int temp = desempilhar(pOriginal);

        while (!pilhaVazia(&pAuxiliar) && topo(&pAuxiliar) > temp) {
            empilhar(pOriginal, desempilhar(&pAuxiliar));
        }

        empilhar(&pAuxiliar, temp);
    }

    while (!pilhaVazia(&pAuxiliar)) {
        empilhar(pOriginal, desempilhar(&pAuxiliar));
    }
}
void imprimirPilha(Pilha *p) {
    if (pilhaVazia(p)) {
        printf("A pilha está vazia.\n");
        return;
    }

    printf("Pilha: ");
    for (int i = 0; i <= p->top; i++) {
        printf("%d ", p->items[i]);
    }
    printf("\n");
}

                //main exercicio 14
                            int main() {
                                Pilha p;
                                inicializaPilha(&p);
                            
                                // Adicionando alguns elementos à pilha
                                empilhar(&p, 5);
                                empilhar(&p, 1);
                                empilhar(&p, 8);
                                empilhar(&p, 3);
                                empilhar(&p, 7);
                            
                                printf("Pilha original:\n");
                                imprimirPilha(&p);
                            
                                // Ordenando a pilha
                                ordenarPilha(&p);
                            
                                printf("Pilha ordenada:\n");
                                imprimirPilha(&p);
                            
                                return 0;
                            }



//exercicio 15

#define MAX 100

typedef struct {
    int fila[MAX];
    int frente;
    int cauda;
} Fila;

void inicializaFila(Fila *f) {
    f->frente = 0;
    f->cauda = 0;
}

int filaVazia(Fila *f) {
    return f->frente == f->cauda;
}

int filaCheia(Fila *f) {
    return (f->cauda + 1) % MAX == f->frente;
}

void enfileirar(Fila *f, int item) {
    if (filaCheia(f)) {
        printf("Erro: Fila cheia!\n");
    } else {
        f->fila[f->cauda] = item;
        f->cauda = (f->cauda + 1) % MAX;
    }
}

int desenfileirar(Fila *f) {
    if (filaVazia(f)) {
        printf("Erro: Fila vazia!\n");
        return -1;  
    } else {
        int item = f->fila[f->frente];
        f->frente = (f->frente + 1) % MAX;  
        return item;
    }
}

int frente(Fila *f) {
    if (filaVazia(f)) {
        printf("Erro: Fila vazia!\n");
        return -1;  // Retorna um valor inválido caso a fila esteja vazia
    } else {
        return f->fila[f->frente];
    }
}

void imprimirFila(Fila *f) {
    if (filaVazia(f)) {
        printf("A fila está vazia.\n");
        return;
    }

    printf("Fila: ");
    int i = f->frente;
    while (i != f->cauda) {
        printf("%d ", f->fila[i]);
        i = (i + 1) % MAX;
    }
    printf("\n");
}

                    //main exercicio 15
                            int main() {
                                Fila f;
                                inicializaFila(&f);
                            
                                // Testando as operações de fila
                                enfileirar(&f, 10);
                                enfileirar(&f, 20);
                                enfileirar(&f, 30);
                                enfileirar(&f, 40);
                            
                                imprimirFila(&f);
                            
                                printf("Frente da fila: %d\n", frente(&f));
                            
                                printf("Desenfileirando: %d\n", desenfileirar(&f));
                                imprimirFila(&f);
                            
                                enfileirar(&f, 50);
                                enfileirar(&f, 60);
                            
                                imprimirFila(&f);
                            
                                return 0;
                            }
